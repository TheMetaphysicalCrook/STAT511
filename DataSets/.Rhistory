## get parameter estimates (order is the same as in beta.s2)
out$par
## compare to estimates from lm:
coef(fit)
## get standard errors from optim
H=out$hessian
S=solve(H)
se=sqrt(diag(S))
Mse <- se
Mse
View(dispersal)
attach(dispersal)
y = d
X=as.matrix(cbind(1,t[,2:3]))
X=as.matrix(cbind(1,dispersal[,2:3]))
normal.lik1<-function(theta,y)
{
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
nll.reg <- function(beta.s2,y,X){
## get parameters
p=length(beta.s2)-1
n=length(y)
beta=beta.s2[1:p]
s2=beta.s2[p+1]
## calculate loglikelihood
loglik=sum(dnorm(y,X%*%beta,sqrt(s2),log=T))
## return negative loglikelihood
-loglik
}
nll.reg
y = d
X=as.matrix(cbind(1,dis_M[,2:3]))
X=as.matrix(cbind(1,dis_F[,2:3]))
nll.reg <- function(beta.s2,y,X){
## get parameters
p=length(beta.s2)-1
n=length(y)
beta=beta.s2[1:p]
s2=beta.s2[p+1]
## calculate loglikelihood
loglik=sum(dnorm(y,X%*%beta,sqrt(s2),log=T))
## return negative loglikelihood
-loglik
}
dis_M <- subset(dispersal, sex=="M")
dis_F <- subset(dispersal, sex=="F")
y = d
X_M=as.matrix(cbind(1,dis_M[,2:3]))
X_F=as.matrix(cbind(1,dis_F[,2:3]))
nll.reg <- function(beta.s2,y,X){
## get parameters
p=length(beta.s2)-1
n=length(y)
beta=beta.s2[1:p]
s2=beta.s2[p+1]
## calculate loglikelihood
loglik=sum(dnorm(y,X%*%beta,sqrt(s2),log=T))
## return negative loglikelihood
-loglik
}
fit=lm(y~0+X)
summary(fit)
##
## find MLE using "optim" numerical optimization
##
beta.start=c(0,0)
s2.start=1
out=optim(c(beta.start,s2.start),nll.reg,y=y,X=X_M,control=list(trace=10),hessian=T)
out=optim(c(beta.start,s2.start),nll.reg,y=y,X_M=X,control=list(trace=10),hessian=T)
View(X_M)
y_M = d$dis_M
y_M = dis_M$d
y_F = dis_F$d
X_M=as.matrix(cbind(1,dis_M[,2:3]))
X_F=as.matrix(cbind(1,dis_F[,2:3]))
out=optim(c(beta.start,s2.start),nll.reg,y=y_M,X=X_M,control=list(trace=10),hessian=T)
View(X_F)
beta.start=0
s2.start=1
out=optim(c(beta.start,s2.start),nll.reg,y=y_M,X=X_M,control=list(trace=10),hessian=T)
out=optim(beta.start,nll.reg,y=y_M,X=X_M,control=list(trace=10),hessian=T)
beta.start=0
s2.start=1
out=optim(c(beta.start,s2.start),nll.reg,y=y_M,X=X_M,control=list(trace=10),hessian=T)
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
optim(c(0,1), normal.lik1, y=y_M, data=dis_M)
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
optim(c(0,1), normal.lik1, y=y_M, data=dis_M)
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M)
out$par
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
OI<-solve(p$hessian)
OI<-solve(out$hessian)
se<-sqrt(diag(OI))
se
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,0), normal.lik1, y=y_M, data=dis_M, hessian=T)
View(out)
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
OI<-solve(out$hessian)
se<-sqrt(diag(OI))
se
fit <- lm(t/sqrt(t)~t+factor(sex))
fit
summary(fit)
# MLE sigma for Women
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_F, data=dis_F, hessian=T)
out$par
OI<-solve(out$hessian)
se<-sqrt(diag(OI))
se
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
OI<-solve(out$hessian)
se_M<-sqrt(diag(OI))
# MLE sigma for Women
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_F, data=dis_F, hessian=T)
out$par
OI<-solve(out$hessian)
se<-sqrt(diag(OI))
se_F
se_F<-sqrt(diag(OI))
se_F
se_M
out$par
OI<-solve(out$hessian)
sigma_F<-diag(OI)
sigma_F
dis_M <- subset(dispersal, sex=="M")
dis_F <- subset(dispersal, sex=="F")
View(dis_M)
View(dis_F)
sigma2
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
sigma2
setwd("/Users/benStraub/Desktop/STAT511/DataSets")
rm(list = ls())
load("dispersal.Rdata")
library(knitr)
library(car)
```
```{r, results=FALSE, echo=FALSE}
str(dispersal)
summary(dispersal)
```
* 300 Elk Observation in the Data Set
* 202 Female Elk
* 98 Male Elk
```{r, results=FALSE, echo=FALSE}
##########################################
## Numerical MLEs for Regression
##########################################
y <- d/sqrt(t)
fit <- lm(y~t+factor(sex))
summary(fit)
se_F
se_M
y <- d/sqrt(t)
fit <- lm(y~t+factor(sex))
## read in data
## view the first few rows of the data
head(dispersal)
attach(dispersal)
dis_M <- subset(dispersal, sex=="M")
dis_F <- subset(dispersal, sex=="F")
y_M = dis_M$d
y_F = dis_F$d
X_M=as.matrix(cbind(1,dis_M[,2:3]))
X_F=as.matrix(cbind(1,dis_F[,2:3]))
# MLE sigma for Men
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
OI<-solve(out$hessian)
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
out <- optim(c(0,1), normal.lik1, y=y_F, data=dis_F, hessian=T)
out$par
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out
outa <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
outa$par
trans <- d/sqrt(t)
fit <- lm(trans~t+factor(sex))
## read in data
## view the first few rows of the data
head(dispersal)
attach(dispersal)
dis_M <- subset(dispersal, sex=="M")
dis_F <- subset(dispersal, sex=="F")
y_M = dis_M$d
y_F = dis_F$d
X_M=as.matrix(cbind(1,dis_M[,2:3]))
X_F=as.matrix(cbind(1,dis_F[,2:3]))
# MLE sigma for Men
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
OI<-solve(out$hessian)
se_M<-sqrt(diag(OI))
fit <- lm(y~t+factor(sex))
# MLE sigma for Women
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_F, data=dis_F, hessian=T)
out$par
OI<-solve(out$hessian)
sigma_F<-diag(OI)
sigma_F
```
setwd("/Users/benStraub/Desktop/STAT511/DataSets")
rm(list = ls())
load("dispersal.Rdata")
library(knitr)
library(car)
```
```{r, results=FALSE, echo=FALSE}
str(dispersal)
summary(dispersal)
```
* 300 Elk Observation in the Data Set
* 202 Female Elk
* 98 Male Elk
```{r, results=FALSE, echo=FALSE}
##########################################
## Numerical MLEs for Regression
##########################################
#trans <- d/sqrt(t)
#fit <- lm(trans~t+factor(sex))
## read in data
## view the first few rows of the data
head(dispersal)
attach(dispersal)
dis_M <- subset(dispersal, sex=="M")
dis_F <- subset(dispersal, sex=="F")
y_M = dis_M$d
y_F = dis_F$d
X_M=as.matrix(cbind(1,dis_M[,2:3]))
X_F=as.matrix(cbind(1,dis_F[,2:3]))
# MLE sigma for Men
normal.lik1<-function(theta,y){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out$par
out <- optim(c(0,1), normal.lik1, y=y_M, data=dis_M, hessian=T)
out <- optim(c(0,0), normal.lik1, y=y_M, data=dis_M, hessian=T)
out <- optim(c(0,0), normal.lik1, y=y_M, X=X_M hessian=T)
out <- optim(c(0,0), normal.lik1, y=y_M, X=X_M, hessian=T)
out$par
beta.start=c(0,0)
s2.start=1
out <- c(beta.start,s2.start), normal.lik1, y=y_M, X=X_M, hessian=T)
beta.start=c(0,0)
s2.start=1
out <- optim(c(beta.start,s2.start), normal.lik1, y=y_M, X=X_M, hessian=T)
out <- optim(c(beta.start,s2.start), normal.lik1, y_M=y, X_M=X, hessian=T)
out <- optim(c(beta.start,s2.start), normal.lik1, y=Y_M, X=X_M, hessian=T)
normal.lik1<-function(theta,y,X){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
out <- optim(c(0,1), normal.lik1, y=y_F, data=dis_F, hessian=T)
normal.lik1<-function(theta,y,X){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
beta.start=c(0,0)
s2.start=1
out <- optim(c(beta.start,s2.start), normal.lik1, y=Y_M, X=X_M, hessian=T)
y_M = dis_M$d
y_F = dis_F$d
X_M=as.matrix(cbind(1,dis_M[,2:3]))
X_F=as.matrix(cbind(1,dis_F[,2:3]))
normal.lik1<-function(theta,y,X){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
beta.start=c(0,0)
s2.start=1
out <- optim(c(beta.start,s2.start), normal.lik1, y=Y_M, X=X_M, hessian=T)
y_M = dis_M$d
y_F = dis_F$d
X_M=as.matrix(cbind(1,dis_M[,2:3]))
X_F=as.matrix(cbind(1,dis_F[,2:3]))
# MLE sigma for Men
normal.lik1<-function(theta,y,X){
mu<-theta[1]
sigma2<-theta[2]
n<-nrow(y)
logl<- -.5*n*log(2*pi) -.5*n*log(sigma2) -
(1/(2*sigma2))*sum((y-mu)**2)
return(-logl)
}
beta.start=c(0,0)
s2.start=1
out <- optim(c(beta.start,s2.start), normal.lik1, y=y_M, X=X_M, hessian=T)
View(dispersal)
y=dis_M$d
X=cbind(1,dis_M$d)
nll.reg <- function(beta.s2,y,X){
## get parameters
p=length(beta.s2)-1
n=length(y)
beta=beta.s2[1:p]
s2=beta.s2[p+1]
## calculate loglikelihood
loglik=sum(dnorm(y,X%*%beta,sqrt(s2),log=T))
## return negative loglikelihood
-loglik
}
beta.start=c(0,0)
s2.start=1
out=optim(c(beta.start,s2.start),nll.reg,y=y,X=X,control=list(trace=10),hessian=T)
out$par
y=dis_M$d
X=cbind(1,dis_M$t)
beta.start=c(0,0)
s2.start=1
out=optim(c(beta.start,s2.start),nll.reg,y=y,X=X,control=list(trace=10),hessian=T)
out$par
coef(fit)
fit=lm(y~0+X)
summary(fit)
out$par
coef(fit)
H=out$hessian
S=solve(H)
se=sqrt(diag(S))
se
y=dis_F$d
X=cbind(1,dis_F$t)
##
## find MLE using "optim" numerical optimization
##
beta.start=c(0,0)
s2.start=1
out=optim(c(beta.start,s2.start),nll.reg,y=y,X=X,control=list(trace=10),hessian=T)
## get parameter estimates (order is the same as in beta.s2)
out$par
## compare to estimates from lm:
fit=lm(y~0+X)
summary(fit)
coef(fit)
## get standard errors from optim
H=out$hessian
S=solve(H)
se=sqrt(diag(S))
se
rm(list = ls())
setwd("/Users/benStraub/Desktop/STAT511/DataSets")
mis = read.csv("mistletoe.csv", sep=",")
library(knitr)
attach(mis)
```
# EXPLORATORY DATA ANALYSIS
```{r, results="hide", echo=FALSE}
str(mis)
```
```{r, results='hide', echo=FALSE}
mis_NA <- subset(mis, !is.na(mis$infected.USU))
# Subsetting data for MNDNR study
mis_MNDNR <- mis[c(-17)]
# Subsetting data for USU studay
mis_USU <- mis_NA[c(-16)]
# Subseeting out infected variables
mis_FIN <- mis_NA[c(-16, -17)]
# Identifies values that are the same
accurate <- which(mis$infected.mndnr == mis$infected.USU)
# False Positives
false_pos <- subset(mis_NA, infected.mndnr==1 & infected.USU==0)
# False Negatives
false_neg <- subset(mis_NA, infected.mndnr==0 & infected.USU==1)
# Subsetting out USU study
# Subsetting data on presence of birds
#mis_USU_1 <- subset(mis_USU, infected.USU == 1)
# Subsetting data on absence of birds
#mis_USU_0 <- subset(mis_USU, infected.USU == 0)
# Creating a New Response Variable
error <- abs(mis_NA$infected.mndnr - mis_NA$infected.USU)
# Binding new variables to Subsetted Mistletoe Data
mis_FIN <- cbind(mis_FIN, error)
# Subsetted Data with mislabeled data
# mis_mis <- subset(mis_USU, mislabeled==1)
# 93 entries of mislabled data
fit <- glm(error~., family=binomial, data=mis_FIN)
kable(summary(fit)$coeff, digits = 5)
f.positive=matrix(data=0,nrow=196,ncol=1)
for(i in 1:196)
{
if(infected.USU[i]-infected.mndnr[i]==-1)
{
f.positive[i]=1
}
}
mistletoe.3=cbind(mis_NA[1:196,1:15],f.positive)
fit.2=glm(f.positive~.,family=binomial,data=mistletoe.3)
fit.2.AIC=step(fit.2)
kable(summary(fit.2.AIC)$coeff)
f.negative=matrix(data=0,nrow=196,ncol=1)
for(i in 1:196)
{
if(infected.USU[i]-infected.mndnr[i]==1)
{
f.negative[i]=1
}
}
mistletoe.4=cbind(mis_NA[1:196,1:15],f.negative)
fit.3=glm(f.negative~.,family=binomial,data=mistletoe.4)
fit.3.AIC=step(fit.3)
summary(fit.3.AIC)$coeff
summary(fit.3.AIC)
